    

    
    
    
    print(score)

    print(X.shape)

    

    try: 
        y_str = y.columns.tolist()
    except Exception as e: 
        y_str = trust

    #shap_viz(best_model, X_test, y_str)
    #shap_viz(model, X, y_str)
    feature_importances = best_model.feature_importances_

    # Create a DataFrame with the feature names and their importance scores
    feature_importances_df = pd.DataFrame({
        'Feature': X.columns,
        'Importance': feature_importances
    })

    # Sort the DataFrame by the importances
    feature_importances_df = feature_importances_df.sort_values(by='Importance', ascending=False)

    # Export to CSV
    feature_importances_df.to_csv(fr'results\xgbclassifier_results\{trust}_feature_importances.csv', index=False)


    plt.figure(figsize=(20,15))
    plt.yticks(fontsize=5)
    plt.tight_layout()
    plot_importance(best_model, max_num_features=15, importance_type='weight')
    plt.savefig(fr'results\xgbclassifier_results\{trust}_accuracy_visual.png')
    plt.close()

    #y_pred = model.predict(X_test)
    # evaluate predictions
    # accuracy = accuracy_score(y_test, y_pred)
    # print(f"{trust} Accuracy: %.2f%%" % (accuracy * 100.0))

    # results = model.evals_result()
    # for key in results:
    #     for metric in results[key]:
    #         print(f"{metric}: {results[key][metric]}")

    #y_pred = model.predict(X_test)


    # squared_diff = (y_pred - y_test) ** 2
    # mse = np.mean(squared_diff)
    # rmse = np.sqrt(mse)
    # print(f'MSE: {mse}, RMSE: {rmse}')

    # plt.figure(figsize=(8, 8))
    # plt.scatter(y_test, y_pred, alpha=0.5, s = 5)
    # plt.plot([np.min(y_test), np.max(y_test)], [np.min(y_test), np.max(y_test)], color='red')  # Line for perfect predictions
    # plt.title(fr'{trust} Actual vs Predicted Values')
      # plt.ylabel('Predicted Values')
    # #plt.show()
    # plt.savefig(fr'results\XGB figures\rf accuracy vis\{trust}_accuracy_visual.png')
   
    # plt.close()
 
    #model, RMSE, MSE, MAE = xgb.xgb_complete(config, df, f'{trust}')
    #row = pd.DataFrame([[f'{trust}',RMSE, MSE, MAE]], columns=['Component','RMSE','MSE','MAE'])
    #xgb_evaluation_df =  pd.concat([xgb_evaluation_df, row], ignore_index=True)

#print(xgb_evaluation_df)
# agg_df = xgb.aggregate_feature_importance(r'results\XGB figures\feature importance')
# #print(agg_df)
# data = xgb.perform_kmeans_and_visualize(agg_df, max_clusters=10)
# data.index = trust_list










#print(data)

#eda.compute_corr_variable_pairs(data, .6)

#df = utils.get_total_df(df)
#df = df.drop(columns = ['Composite.AV.Trust_3','Composite.AV.Trust_28'])
# num = eda.determine_PC_num(df, config)
# pdf = eda.plot_pca(df, None ,num)
# print(pdf.head(15))

#eda.compute_corr_variable_pairs(df, .9)

#total_fa_df, total_fa_loadings = eda.factor_analysis(df)